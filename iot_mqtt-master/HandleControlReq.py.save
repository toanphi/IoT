# -*- coding: utf-8 -*-
import requests
from gtts import gTTS
import subprocess
import os
import json
from PublishDataMqtt import publish_To_Topic
from datetime import datetime

BASE_URL = "http://localhost:3123"


def login():
    headers = {'Content-type': 'application/json'}
    item = {
        "username": "service",
        "password": "uet@iot@service"
    }
    accessToken = requests.post(BASE_URL + "/authenticate", data = json.dumps(item), headers = headers).json()['data']['jwt']
    return accessToken

accessToken = login()

# insert data
def insertInputData(deviceId, command):
    print(command)
    rawDate = datetime.today()
    item = {
        "id": 0,
        "deviceId": deviceId,
        "data": command,
        "dataType": "input",
        "createdDate": str(rawDate),
        "dataType": "input"
    }
    
    headers = {'Content-type': 'application/json', "Authorization": accessToken}
    requests.post(BASE_URL + "/device/data", data = json.dumps(item), headers = headers)
#   base url of the backend server
#
#   Switch default value 
maxSwitchButton = 3

##  find item with properties in a dictionary
#   prop1 is search property
#   prop2 is mapping property of prop1 in dictionary
#   flag is used for exact searching
def getLstPropFromDict(prop1, prop2, dictionary, flag):
    items = []
    for item in dictionary:
        if (prop1 in item[prop2]):
            if (flag == 1):
                return item
            items.append(item)
    return items


def controlling(input, device):
    name = input['id']
    command = input['command']

    # if no device found, return
    #if (device == []):
        #return "không tìm thấy thiết bị có tên " + name

    # process sensor data
    # print("DEVICE:", device)
    # if (device['productType'] == "sensor"):
    #     deviceName = {
    #         "deviceName": device['name']
    #     }
        # if ("giá trị hiện tại" in command):
        #     req = requests.get(BASE_URL + "/device/data/get/{deviceName}".format(**deviceName)).json()['data']
        #     value = req['data']
        #     dataType = req['dataType']

        #     curValue = str(value) + " " + str(dataType)
            #return "giá trị hiện tại là " + curValue 

    try:
        # process switch data
        if (device['productType'] == "switch"):
            processSwitchCommand(device, command)
            insertInputData(device['id'], command)
            #return name + " thực hiện " + command

        # process remote command    
        if (device['productType'] in ["tivi", "fan", "air-conditioner"]):
            processRemoteCommand(device, command)
            insertInputData(device['id'], command)
            #return name + " thực hiện " + command
        return True
    except:
        return False

## switch is on wireless
def processSwitchCommand(device, confirmCommand):
    controlTopic = str(device['controlTopic'])
    startIndex = controlTopic.rindex("/") + 1
    endIndex = len(controlTopic)
    deviceId = controlTopic[startIndex:endIndex]
    lstGangsInput = {}

    # mapping data field in mqtt data of switch control
    for i in range(1, maxSwitchButton + 1):
        gangStr = "out" + str(i)
        lstGangsInput[gangStr] = 0
        if device['gangs'] == i:
            if confirmCommand == "KEY_ON":
                lstGangsInput[gangStr] = 100
            else:
                lstGangsInput[gangStr] = 0

    # the final form of mqtt data
    finalMessage = {
        "id": deviceId,
        "data":lstGangsInput
    }

    switchDataJson = json.dumps(finalMessage)
    print(switchDataJson)
    publish_To_Topic(controlTopic, switchDataJson)


## remote command is processed by bash
def processRemoteCommand(device, confirmCommand):
    bashCommand(device['model'], confirmCommand)

## bash to send ir control signal
def bashCommand(id, key):
    print(id, key)
    command = "irsend SEND_ONCE" + " " + id + " " + key
    print(command)
    process = subprocess.Popen(command.split(" "), stdout=subprocess.PIPE)
    output, error = process.communicate()
    print(output, error)
    return(output)

# controlling("đèn phòng ngủ 1_off")
# controlling("tivi phòng ngủ_số 1")
# controlling("quạt phòng ngủ_fanlow")
command = "irsend SEND_ONCE" + " " + "tv_phongngu" + " " + "KEY_VOLUMEUP"
print(command)
process = subprocess.Popen(command.split(" "), stdout=subprocess.PIPE)
output, error = process.communicate()
print(output, error)
